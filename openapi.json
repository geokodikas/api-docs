{
  "openapi": "3.0.0",
  "info": {
    "version": "1.0.0",
    "title": "Geokodikas",
    "description": "The HTTP API of [Geokodikas](https://github.com/geokodikas/geokodikas)\n"
  },
  "tags": [
    {
      "name": "OSM Entities",
      "description": "Endpoints to access OSM entities"
    },
    {
      "name": "Geocoding",
      "description": "Endpoints to perform geocoding"
    }
  ],
  "servers": [
    {
      "url": "http://localhost:8080/api/v1"
    }
  ],
  "paths": {
    "/address/{id}": {
      "get": {
        "tags": [
          "OSM Entities"
        ],
        "summary": "Get information about an Address by its id",
        "description": "In Geokodikas an Address is a Way or Node with either `Address` or `Venue` as layer.\nThe layer `Venue` is used for entities with a `name` tag.\n",
        "operationId": "getAddressById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of the Address.",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "$ref": "#/components/parameters/formatting"
          },
          {
            "$ref": "#/components/parameters/accept"
          },
          {
            "$ref": "#/components/parameters/accept-language"
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "404": {
            "description": "Address not found"
          }
        }
      }
    },
    "/osm_entity/way/{id}": {
      "get": {
        "tags": [
          "OSM Entities"
        ],
        "summary": "Get information about a Way by its id",
        "operationId": "getWayById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id(s) of the Way\n\nExample: `8061263`\n\nExample: `8061263,8061267`\n",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer"
              }
            }
          },
          {
            "$ref": "#/components/parameters/formatting"
          },
          {
            "$ref": "#/components/parameters/accept"
          },
          {
            "$ref": "#/components/parameters/accept-language"
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "404": {
            "description": "Way not found"
          }
        }
      }
    },
    "/osm_entity/node/{id}": {
      "get": {
        "tags": [
          "OSM Entities"
        ],
        "summary": "Get information about a Node by its id",
        "operationId": "getNodeById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id(s) of the Node\n\nExample: `1422600738`\n\nExample: `1422600738,1889049559`\n",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer"
              }
            }
          },
          {
            "$ref": "#/components/parameters/formatting"
          },
          {
            "$ref": "#/components/parameters/accept"
          },
          {
            "$ref": "#/components/parameters/accept-language"
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "404": {
            "description": "Node not found"
          }
        }
      }
    },
    "/osm_entity/relation/{id}": {
      "get": {
        "tags": [
          "OSM Entities"
        ],
        "summary": "Get information about a Relation by its id",
        "operationId": "getRelationById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id(s) of the Relation\n\nExample: `52411`\n\nExample: `53134,90348`\n",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer"
              }
            }
          },
          {
            "$ref": "#/components/parameters/formatting"
          },
          {
            "$ref": "#/components/parameters/accept"
          },
          {
            "$ref": "#/components/parameters/accept-language"
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "404": {
            "description": "Relation not found"
          }
        }
      }
    },
    "/reverse": {
      "get": {
        "tags": [
          "Geocoding"
        ],
        "summary": "Perform reverse geocoding",
        "operationId": "rerverseGeocoding",
        "parameters": [
          {
            "name": "lon",
            "in": "query",
            "description": "Longitude",
            "required": true,
            "schema": {
              "type": "number",
              "format": "double"
            },
            "example": 51.332267409713985
          },
          {
            "name": "lat",
            "in": "query",
            "description": "Latitude",
            "required": true,
            "schema": {
              "type": "number",
              "format": "double"
            },
            "example": 4.521034955978394
          },
          {
            "name": "limitNumeric",
            "in": "query",
            "description": "The number of results that maximally may be returned.",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 5
            }
          },
          {
            "name": "limitRadius",
            "in": "query",
            "description": "The radius in meters in which to search for objects.",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 200
            }
          },
          {
            "name": "limitLayers",
            "in": "query",
            "description": "If specified only objects with the specified layer will be returned. Multiple values must be separated by a comma.\nNote that depending on which layers are specified different types of entities may be returned.\nFor each such type, a query is made to a specific database table.\nTherefore, specifying more layers than required may slow down the request.\n\n - VirtualTrafficFlow, can be of type Node or Way. E.g. speed camera's.\n - PhysicalTrafficFlow, can only be of type Node. Eg. bumps.\n - Junction, can be of type Node or Way.\n - Link, can only be of type Way. This are ways connecting highways and non-highways.\n - Street, can only be of type Way.\n - Address, can only be of type Address.\n - Venue, can only be of type Address. This are addresses with a name.\n - Neighbourhood, can only be of type Relation. This are sub-municipalities, districts etc.\n - LocalAdmin, can only be of type Relation. This are cities and municipalities.\n - County, can only be of type Relation. This are counties and provinces.\n - MacroRegion, can only be of type Relation.\n - Country, can only of type Relation.\n",
            "required": false,
            "schema": {
              "type": "array",
              "default": [
                "Address",
                "Venue",
                "Street",
                "Link"
              ],
              "items": {
                "type": "string",
                "enum": [
                  "VirtualTrafficFlow",
                  "PhysicalTrafficFlow",
                  "Junction",
                  "Link",
                  "Venue",
                  "Address",
                  "Street",
                  "Neighbourhood",
                  "LocalAdmin",
                  "County",
                  "MacroRegion",
                  "Country"
                ]
              }
            },
            "example": [
              "Address",
              "Venue"
            ]
          },
          {
            "name": "includeTags",
            "in": "query",
            "description": "Only has influence on the JSON response. The values of the specified tags will be included in the response. If the object has no tag the value will be `null`.",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "default": null
            },
            "example": [
              "maxspeed",
              "ref"
            ]
          },
          {
            "name": "includeGeometry",
            "in": "query",
            "description": "Only has influence on the JSON response, because the geometry is required for rendering in the HTML view. If `false` the geometry of the returned objects will not be fetched from the database and not included in the geojson. The `closest-point` feature will also not be included in the response.",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": true
            }
          },
          {
            "$ref": "#/components/parameters/formatting"
          },
          {
            "$ref": "#/components/parameters/accept"
          },
          {
            "$ref": "#/components/parameters/accept-language"
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    }
  },
  "components": {
    "parameters": {
      "formatting": {
        "name": "formatting",
        "in": "query",
        "description": "Whether to return response as JSON or HTML. This parameter takes precedence over the Accept Header.",
        "required": false,
        "schema": {
          "type": "string",
          "enum": [
            "html",
            "json"
          ]
        }
      },
      "accept": {
        "name": "Accept",
        "in": "header",
        "description": "Whether to return response as JSON or HTML. The query parameter takes precedence over this header.",
        "required": false,
        "schema": {
          "type": "string",
          "enum": [
            "html",
            "json"
          ]
        }
      },
      "accept-language": {
        "name": "Accept-Language",
        "in": "header",
        "description": "Specifies the preferred language(s) for the response. Only the language code is taken into account, i.e. `nl-BE` and `nl-NL` are both processed as `nl`.",
        "required": false,
        "schema": {
          "type": "string"
        }
      }
    }
  }
}
